<?php
/**
 * Distribution
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Flagr
 *
 * Flagr is a feature flagging, A/B testing and dynamic configuration microservice
 *
 * OpenAPI spec version: 1.0.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Distribution Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Distribution implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'distribution';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'percent' => 'int',
        'bitmap' => 'string',
        'variant_key' => 'string',
        'variant_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'percent' => 'int64',
        'bitmap' => null,
        'variant_key' => null,
        'variant_id' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'percent' => 'percent',
        'bitmap' => 'bitmap',
        'variant_key' => 'variantKey',
        'variant_id' => 'variantID'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'percent' => 'setPercent',
        'bitmap' => 'setBitmap',
        'variant_key' => 'setVariantKey',
        'variant_id' => 'setVariantId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'percent' => 'getPercent',
        'bitmap' => 'getBitmap',
        'variant_key' => 'getVariantKey',
        'variant_id' => 'getVariantId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['percent'] = isset($data['percent']) ? $data['percent'] : null;
        $this->container['bitmap'] = isset($data['bitmap']) ? $data['bitmap'] : null;
        $this->container['variant_key'] = isset($data['variant_key']) ? $data['variant_key'] : null;
        $this->container['variant_id'] = isset($data['variant_id']) ? $data['variant_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['id']) && ($this->container['id'] < 1)) {
            $invalidProperties[] = "invalid value for 'id', must be bigger than or equal to 1.";
        }

        if ($this->container['percent'] === null) {
            $invalidProperties[] = "'percent' can't be null";
        }
        if (($this->container['percent'] > 100)) {
            $invalidProperties[] = "invalid value for 'percent', must be smaller than or equal to 100.";
        }

        if (($this->container['percent'] < 0)) {
            $invalidProperties[] = "invalid value for 'percent', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['bitmap']) && (strlen($this->container['bitmap']) < 1)) {
            $invalidProperties[] = "invalid value for 'bitmap', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['variant_key'] === null) {
            $invalidProperties[] = "'variant_key' can't be null";
        }
        if ((strlen($this->container['variant_key']) < 1)) {
            $invalidProperties[] = "invalid value for 'variant_key', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['variant_id'] === null) {
            $invalidProperties[] = "'variant_id' can't be null";
        }
        if (($this->container['variant_id'] < 1)) {
            $invalidProperties[] = "invalid value for 'variant_id', must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['id'] < 1) {
            return false;
        }
        if ($this->container['percent'] === null) {
            return false;
        }
        if ($this->container['percent'] > 100) {
            return false;
        }
        if ($this->container['percent'] < 0) {
            return false;
        }
        if (strlen($this->container['bitmap']) < 1) {
            return false;
        }
        if ($this->container['variant_key'] === null) {
            return false;
        }
        if (strlen($this->container['variant_key']) < 1) {
            return false;
        }
        if ($this->container['variant_id'] === null) {
            return false;
        }
        if ($this->container['variant_id'] < 1) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {

        if (!is_null($id) && ($id < 1)) {
            throw new \InvalidArgumentException('invalid value for $id when calling Distribution., must be bigger than or equal to 1.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets percent
     *
     * @return int
     */
    public function getPercent()
    {
        return $this->container['percent'];
    }

    /**
     * Sets percent
     *
     * @param int $percent percent
     *
     * @return $this
     */
    public function setPercent($percent)
    {

        if (($percent > 100)) {
            throw new \InvalidArgumentException('invalid value for $percent when calling Distribution., must be smaller than or equal to 100.');
        }
        if (($percent < 0)) {
            throw new \InvalidArgumentException('invalid value for $percent when calling Distribution., must be bigger than or equal to 0.');
        }

        $this->container['percent'] = $percent;

        return $this;
    }

    /**
     * Gets bitmap
     *
     * @return string
     */
    public function getBitmap()
    {
        return $this->container['bitmap'];
    }

    /**
     * Sets bitmap
     *
     * @param string $bitmap bitmap
     *
     * @return $this
     */
    public function setBitmap($bitmap)
    {

        if (!is_null($bitmap) && (strlen($bitmap) < 1)) {
            throw new \InvalidArgumentException('invalid length for $bitmap when calling Distribution., must be bigger than or equal to 1.');
        }

        $this->container['bitmap'] = $bitmap;

        return $this;
    }

    /**
     * Gets variant_key
     *
     * @return string
     */
    public function getVariantKey()
    {
        return $this->container['variant_key'];
    }

    /**
     * Sets variant_key
     *
     * @param string $variant_key variant_key
     *
     * @return $this
     */
    public function setVariantKey($variant_key)
    {

        if ((strlen($variant_key) < 1)) {
            throw new \InvalidArgumentException('invalid length for $variant_key when calling Distribution., must be bigger than or equal to 1.');
        }

        $this->container['variant_key'] = $variant_key;

        return $this;
    }

    /**
     * Gets variant_id
     *
     * @return int
     */
    public function getVariantId()
    {
        return $this->container['variant_id'];
    }

    /**
     * Sets variant_id
     *
     * @param int $variant_id variant_id
     *
     * @return $this
     */
    public function setVariantId($variant_id)
    {

        if (($variant_id < 1)) {
            throw new \InvalidArgumentException('invalid value for $variant_id when calling Distribution., must be bigger than or equal to 1.');
        }

        $this->container['variant_id'] = $variant_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


